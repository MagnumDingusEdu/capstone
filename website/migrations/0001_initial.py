# Generated by Django 4.1.3 on 2022-11-28 14:38

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        (
            "accounts",
            "0003_student_adm_mode_student_app_no_student_branch_code_and_more",
        ),
    ]

    operations = [
        migrations.CreateModel(
            name="Constraint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=1024)),
                ("description", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="NoticeCategory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("title", models.TextField()),
                ("collapsed", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name_plural": "Notice Categories",
            },
        ),
        migrations.CreateModel(
            name="Scholarship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "scholarship_type",
                    models.IntegerField(choices=[(1, "Merit"), (2, "Merit Cum Means")]),
                ),
                ("eligibility_criteria", models.TextField()),
                ("number_of_scholarships", models.CharField(max_length=1024)),
                ("value_of_scholarship", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="ScholarshipCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name="ScholarshipConstraint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("min_value", models.FloatField(blank=True, null=True)),
                ("max_value", models.FloatField(blank=True, null=True)),
                (
                    "constraint",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="website.constraint",
                    ),
                ),
                (
                    "scholarship",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="website.scholarship",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="scholarship",
            name="category",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="website.scholarshipcategory",
            ),
        ),
        migrations.AddField(
            model_name="scholarship",
            name="constraints",
            field=models.ManyToManyField(
                through="website.ScholarshipConstraint", to="website.constraint"
            ),
        ),
        migrations.CreateModel(
            name="Notice",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("title", models.TextField()),
                ("attachment", models.FileField(blank=True, null=True, upload_to="")),
                ("date", models.DateTimeField(auto_now_add=True)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="website.noticecategory",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MCMApp",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("contact_number", models.PositiveIntegerField()),
                ("alternate_contact_number", models.PositiveIntegerField()),
                (
                    "state_of_residence",
                    models.CharField(
                        choices=[
                            ("Andhra Pradesh", "Andhra Pradesh"),
                            ("Arunachal Pradesh", "Arunachal Pradesh"),
                            ("Assam", "Assam"),
                            ("Bihar", "Bihar"),
                            ("Chhattisgarh", "Chhattisgarh"),
                            ("Goa", "Goa"),
                            ("Gujarat", "Gujarat"),
                            ("Haryana", "Haryana"),
                            ("Himachal Pradesh", "Himachal Pradesh"),
                            ("Jharkhand", "Jharkhand"),
                            ("Karnataka", "Karnataka"),
                            ("Kerala", "Kerala"),
                            ("Madhya Pradesh", "Madhya Pradesh"),
                            ("Maharashtra", "Maharashtra"),
                            ("Manipur", "Manipur"),
                            ("Meghalaya", "Meghalaya"),
                            ("Mizoram", "Mizoram"),
                            ("Nagaland", "Nagaland"),
                            ("Odisha", "Odisha"),
                            ("Punjab", "Punjab"),
                            ("Rajasthan", "Rajasthan"),
                            ("Sikkim", "Sikkim"),
                            ("Tamil Nadu", "Tamil Nadu"),
                            ("Telangana", "Telangana"),
                            ("Tripura", "Tripura"),
                            ("Uttarakhand", "Uttarakhand"),
                            ("Uttar Pradesh", "Uttar Pradesh"),
                            ("West Bengal", "West Bengal"),
                            (
                                "Andaman and Nicobar Islands",
                                "Andaman and Nicobar Islands",
                            ),
                            ("Chandigarh", "Chandigarh"),
                            (
                                "Dadra and Nagar Haveli and Daman & Diu",
                                "Dadra and Nagar Haveli and Daman & Diu",
                            ),
                            (
                                "The Government of NCT of Delhi",
                                "The Government of NCT of Delhi",
                            ),
                            ("Jammu & Kashmir", "Jammu & Kashmir"),
                            ("Ladakh", "Ladakh"),
                            ("Lakshadweep", "Lakshadweep"),
                            ("Puducherry", "Puducherry"),
                        ],
                        max_length=255,
                    ),
                ),
                ("class_12_marks", models.CharField(max_length=255)),
                (
                    "current_cgpa_or_rank",
                    models.CharField(
                        help_text="Current CGPA or Rank or Diploma %", max_length=255
                    ),
                ),
                (
                    "family_income_per_mcm_application",
                    models.CharField(
                        help_text="FAMILY INCOME AS MENTIONED IN MCM APPLICATION FORM",
                        max_length=255,
                    ),
                ),
                (
                    "family_income_per_affidavit",
                    models.CharField(
                        help_text="FAMILY INCOME AS PER AFFIDAVIT ATTACHED",
                        max_length=255,
                    ),
                ),
                (
                    "family_income_per_certificate",
                    models.CharField(
                        help_text="FAMILY INCOME AS PER CERTIFICATE OF TEHSILDAR",
                        max_length=255,
                    ),
                ),
                ("bank_balance", models.IntegerField()),
                ("fdr_balance", models.CharField(max_length=255)),
                (
                    "itr_annual_year_current",
                    models.IntegerField(help_text="ITR for this annual year"),
                ),
                (
                    "itr_annual_year_last",
                    models.IntegerField(help_text="ITR for previous annual year"),
                ),
                (
                    "itr_annual_year_last_last",
                    models.IntegerField(help_text="ITR for last to last annual year"),
                ),
                (
                    "immovable_property",
                    models.BooleanField(
                        help_text="IMMOVABLE PROPERTY AS PER AFFIDAVIT"
                    ),
                ),
                (
                    "single_girl_child",
                    models.BooleanField(help_text="Are you a Single Girl Child?"),
                ),
                (
                    "applied_for_mcp_special",
                    models.BooleanField(help_text="APPLIED FOR MCM SPECIAL?"),
                ),
                (
                    "mcp_special_reason",
                    models.TextField(
                        help_text="SPECIFIC REASON FOR APPLYING MCM SPECIAL?"
                    ),
                ),
                (
                    "applied_for_other_scholarship",
                    models.BooleanField(
                        help_text="HAVE YOU APPLIED FOR ANY OTHER SCHOLARSHIP?"
                    ),
                ),
                (
                    "other_scholarship_details",
                    models.TextField(help_text="DETAILS OF OTHER SCHOLARSHIP APPLIED"),
                ),
                (
                    "previous_year_scholarship",
                    models.BooleanField(
                        help_text="HAVE YOU RECEIVED ANY SCHOLARSHIP IN THE PREVIOUS YEAR?"
                    ),
                ),
                (
                    "previous_year_scholarship_details",
                    models.TextField(
                        help_text="DETAILS OF PREVIOUS SCHOLARSHIP RECEIVED"
                    ),
                ),
                (
                    "previous_year_scholarship_amount",
                    models.IntegerField(help_text="AMOUNT OF THE PREVIOUS SCHOLARSHIP"),
                ),
                (
                    "declaration",
                    models.BooleanField(
                        help_text="I ACKNOWLEDGE THAT I HAVE READ ALL THE ELIGIBILITY CRITERIA OF SCHOLARSHIP AND I AM ELIGIBLE FOR APPLYING TIET MERIT CUM MEANS SCHOLARSHIP."
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.student",
                    ),
                ),
            ],
        ),
    ]
